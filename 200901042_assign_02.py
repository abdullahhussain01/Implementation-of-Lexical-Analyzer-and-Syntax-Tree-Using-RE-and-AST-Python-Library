# -*- coding: utf-8 -*-
"""200901042_Assign_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MeAC6WBivSdCKjpx7fBUB0rVxmyedZJY
"""

import re

def tokenize(expression):
  # Build a regular expression to match all the tokens in the expression
  token_regex = re.compile(r'\d+|[a-zA-Z]+|[+-/*()]')

  # Use the regular expression to find all the tokens in the expression
  tokens = token_regex.findall(expression)

  # Return the list of tokens
  return tokens

expression = "a+(b*c)"
tokens = tokenize(expression)
print(tokens)
# Output: ['a', '+', '(', 'b', '*', 'c', ')']

import re

def tokenize(expression):
  # Build a regular expression to match all the tokens in the expression
  token_regex = re.compile(r'\d+|[a-zA-Z]+|[+-/*()]')

  # Use the regular expression to find all the tokens in the expression
  tokens = token_regex.findall(expression)

  # Return the list of tokens
  return tokens

expression = "3+(5*2)"
tokens = tokenize(expression)
print(tokens)
# Output: ['3', '+', '(', '5', '*', '2', ')']

import ast

def build_syntax_tree(expression):
  # Parse the expression into an AST using the parse function from the ast module
  tree = ast.parse(expression)

  # Return the AST
  return tree

expression = "3+(5*2)"
tree = build_syntax_tree(expression)
print(ast.dump(tree))
# Output:
# Module(body=[Expr(value=BinOp(left=Num(n=3), op=Add(), right=BinOp(left=Num(n=5), op=Mult(), right=Num(n=2))))])